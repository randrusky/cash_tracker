package ui

import (
	"fmt"
	"strconv"
	"time"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/dialog"
	"fyne.io/fyne/v2/widget"
	"cash_tracker/v2/logic" // –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à —à–ª—è—Ö
)

const timeFormat = "02-01-2006"

// CreateStatsWindow —Å—Ç–≤–æ—Ä—é—î –≤—ñ–∫–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è)
func CreateStatsWindow(app fyne.App, parent fyne.Window) {
	statsWin := app.NewWindow("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω—å")
	statsWin.Resize(fyne.NewSize(800, 600))

	var records []logic.Record
	var table *widget.Table

	// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
	refreshTable := func(newRecords []logic.Record) {
		records = newRecords
		if table != nil {
			table.Refresh()
		}
	}

	// --- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó ---
	startDateEntry := widget.NewEntry()
	startDateEntry.SetPlaceHolder(timeFormat)

	endDateEntry := widget.NewEntry()
	endDateEntry.SetPlaceHolder(timeFormat)
	endDateEntry.SetText(time.Now().Format(timeFormat))

	filterButton := widget.NewButton("–§—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏", func() {
		start, err1 := time.Parse(timeFormat, startDateEntry.Text)
		end, err2 := time.Parse(timeFormat, endDateEntry.Text)

		if err1 != nil || err2 != nil {
			dialog.ShowError(fmt.Errorf("–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –î–î-–ú–ú-–†–†–†–†"), statsWin)
			return
		}
		end = end.Add(23*time.Hour + 59*time.Minute + 59*time.Second)

		loadedRecords, err := logic.LoadRecordsByDateRange(start, end)
		if err != nil {
			dialog.ShowError(err, statsWin)
			return
		}
		refreshTable(loadedRecords)
	})

	resetButton := widget.NewButton("–°–∫–∏–Ω—É—Ç–∏", func() {
		startDateEntry.SetText("")
		endDateEntry.SetText(time.Now().Format(timeFormat))
		allRecords, _ := logic.LoadAllRecords()
		refreshTable(allRecords)
	})

	filterBox := container.NewHBox(
		widget.NewLabel("–ó:"), startDateEntry,
		widget.NewLabel("–ü–æ:"), endDateEntry,
		filterButton, resetButton,
	)

	// --- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ ---
	table = widget.NewTable(
		func() (int, int) { return len(records) + 1, 5 }, // 5 —Å—Ç–æ–≤–ø—Ü—ñ–≤
		// **–ó–ú–Ü–ù–ê 1: –°—Ç–≤–æ—Ä—é—î–º–æ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–º—ñ—Ä–∫–∏**
		func() fyne.CanvasObject {
			// –ö–æ–∂–Ω–∞ –∫–æ–º—ñ—Ä–∫–∞ –±—É–¥–µ –º—ñ—Å—Ç–∏—Ç–∏ —ñ —Ç–µ–∫—Å—Ç, —ñ –∫–Ω–æ–ø–∫—É.
			// container.Max –ø–æ–∫–∞–∑—É—î –ª–∏—à–µ –æ–¥–∏–Ω –≤–∏–¥–∏–º–∏–π –≤—ñ–¥–∂–µ—Ç –∑—ñ —Å—Ç–æ–ø–∫–∏.
			return container.NewMax(widget.NewLabel("..."), widget.NewButton("", nil))
		},
		// **–ó–ú–Ü–ù–ê 2: –û–Ω–æ–≤–ª—é—î–º–æ –≤–º—ñ—Å—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, –∞ –Ω–µ –∑–∞–º—ñ–Ω—é—î–º–æ –π–æ–≥–æ**
		func(id widget.TableCellID, cell fyne.CanvasObject) {
			// –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ—Å—Ç—É–ø –¥–æ –≤—ñ–¥–∂–µ—Ç—ñ–≤ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
			c := cell.(*fyne.Container)
			label := c.Objects[0].(*widget.Label)
			button := c.Objects[1].(*widget.Button)

			if id.Row == 0 { // –ó–∞–≥–æ–ª–æ–≤–∫–∏
				button.Hide()
				label.Show()
				headers := []string{"ID", "–î–∞—Ç–∞", "–°—É–º–∞", "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏", "–í–∏–¥–∞–ª–∏—Ç–∏"}
				label.SetText(headers[id.Col])
				label.TextStyle.Bold = true
				return
			}
			label.TextStyle.Bold = false
			
			rec := records[id.Row-1]

			switch id.Col {
			case 0, 1, 2: // –¢–µ–∫—Å—Ç–æ–≤—ñ —Å—Ç–æ–≤–ø—Ü—ñ
				button.Hide()
				label.Show()
				var text string
				if id.Col == 0 {
					text = strconv.FormatInt(rec.ID, 10)
				} else if id.Col == 1 {
					text = rec.Date.Format("02-01-2006 15:04")
				} else {
					text = fmt.Sprintf("%d –≥—Ä–Ω", rec.Total)
				}
				label.SetText(text)
			case 3: // –ö–Ω–æ–ø–∫–∞ "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏"
				label.Hide()
				button.Show()
				button.SetText("‚úèÔ∏è")
				button.OnTapped = func() {
					CreateEditWindow(app, rec, func() {
						resetButton.OnTapped()
					})
				}
			case 4: // –ö–Ω–æ–ø–∫–∞ "–í–∏–¥–∞–ª–∏—Ç–∏"
				label.Hide()
				button.Show()
				button.SetText("üóëÔ∏è")
				button.OnTapped = func() {
					dialog.ShowConfirm("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", fmt.Sprintf("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Å #%d?", rec.ID), func(ok bool) {
						if !ok { return }
						if err := logic.DeleteRecord(rec.ID); err != nil {
							dialog.ShowError(err, statsWin)
							return
						}
						resetButton.OnTapped()
					}, statsWin)
				}
			}
		},
	)
	table.SetColumnWidth(0, 50)
	table.SetColumnWidth(1, 160)
	table.SetColumnWidth(2, 100)
	table.SetColumnWidth(3, 100)
	table.SetColumnWidth(4, 100)

	content := container.NewBorder(filterBox, nil, nil, nil, table)

	statsWin.SetContent(content)
	statsWin.Show()

	resetButton.OnTapped()
}